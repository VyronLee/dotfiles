#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

dont_setup_git=false
override_all=false
backup_all=false
skip_all=false
while [ $# -gt 0 ]; do
    case "$1" in
        --dont-setup-git)
            dont_setup_git=true
            ;;
        --override-all)
            override_all=true
            ;;
        --backup-all)
            backup_all=true
            ;;
        --skip-all)
            skip_all=true
            ;;
        *)
            echo "Illegal option $1"
            ;;
    esac
    shift $(( $# > 0 ? 1: 0 ))
done

set -e

if test "$(uname)" = "Darwin"; then
    SYS="macOS"
elif test "$(expr substr $(uname -s) 1 5)" = "Linux"; then
    SYS="Linux"
fi

############################################################
## helper

info () {
    printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
    printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
            local currentSrc="$(readlink $dst)"
            if [ "$currentSrc" == "$src" ]; then
                skip=true;
            else
                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac
            fi
        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]; then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]; then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]; then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]; then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}


############################################################
## steps

setup_gitconfig () {
    if ! [ -f git/gitconfig.local.symlink -a "$dont_setup_git" == "true" ]; then
        info 'setup gitconfig'

        git_credential='cache'
        if [ "$(uname -s)" == "Darwin" ]; then
            git_credential='osxkeychain'
        fi

        user ' - What is your git author name?'
        read -e git_authorname
        user ' - What is your git author email?'
        read -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

        success 'gitconfig'
    fi
}

install_packages () {
    if test "$SYS" = "macOS"; then
        # Install homebrew
        if test ! $(which brew); then
            info 'installing Homebrew'
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        fi
        # Install bundle
        info 'brew bundle'
        brew update
        brew bundle --file=Brewfile-macOS #--verbose
        brew linkapps
    elif test "$SYS" = "Linux"; then
        cat apt-list | xargs sudo apt-get install -y
    fi
}

install_dependencies () {
    info 'install dependencies'
    ./script/install
}

install_dotfiles () {
    info 'installing dotfiles'

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

setup_gitconfig
install_dotfiles
install_packages 
install_dependencies

echo ''
echo '  All installed!'
